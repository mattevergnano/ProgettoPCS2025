@startuml
title Platonic Solid

package "PlatonicLibrary" <<Folder>> {
    
    struct PlatonicSolids {
        -int p
        -int q
        -int b
        -int id_vertice1
        -int id_vertice2

        -vector<int> Cells0DsId
        -vector<int> Cells1DsId
        -vector<int> Cells2DsId 
        -vector<int> Cells3DsId

        -MatrixXd Cells0DsCoordinates
        -MatrixXi Cells1DsExtrema

        -MatrixXi Cell1DVertices
        -MatrixXi Cells2DsVertices 
        -VectorXi Cells3DsVertices
        -vector<vector<int>> Cells1DsVertices
        -vector<vector<int>> Cells2DsVertices 

        -MatrixXi Cells2DsEdges 
        -VectorXi Cells2DsNumEdges 
        -VectorXi Cells3DsEdges 

        -vector<vector<int>> Cells2DsNeighborhood
        -VectorXi Cells3DsFaces 
        -vector<vector<int>> VerticeFaces

        -vector<vector<int>> adjacency 
        -map<int, list<int>> ShortPathVertices 
        -map<int, list<int>> ShortPathEdges

        +int ImportValue(int argc, char* argv[], PlatonicSolids& solido)
        +int CreateSolid(PlatonicSolids& solido)
        +void FileCell0Ds(PlatonicSolids& solido)
        +void FileCell1Ds(PlatonicSolids& solido)
        +void FileCell2Ds(PlatonicSolids& solido)
        +void FileCell3Ds(PlatonicSolids& solido)
        +int DualPolyhedron(PlatonicSolids& solido, PlatonicSolids& solido1)
        +int CreateMesh(PlatonicSolids& solido)
        +int ShortestPath(PlatonicSolids& solido)
        +int VerticeAdjacency(PlatonicSolids& solido)
    }

    note left of PlatonicSolids::Cells2DsNeighborhood
        Facce adiacenti a ciascuna faccia
    end note

    note left of PlatonicSolids::VerticeFaces
        Facce di cui ogni punto Ã¨ un vertice
    end note
}

package "Gedim" <<Frame>> {
}

PlatonicSolids -right-> Gedim 

note "Libreria esterna" as GedimNote
GedimNote .. Gedim

@enduml